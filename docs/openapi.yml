openapi: '3.1.0'

info:
  title: 'ShareBasket API'
  version: '1.0.0'
paths:
  /login:
    post:
      tags:
        - Auth
      summary: 'ログイン'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  type: string
                  format: password
                  description: 'パスワード'
              required:
                - email
                - password
      responses:
        '204':
          description: 'ログイン成功'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServer'
  /signup:
    post:
      tags:
        - Auth
      summary: '会員登録'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ユーザー名
                email:
                  $ref: '#/components/schemas/Email'
                password:
                  type: string
                  format: password
                  description: パスワード
      responses:
        '204':
          description: '会員登録完了'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: 'メールアドレス重複'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 'EMAIL_ALREADY_EXISTS'
                detail: 'this email is already exists'
        '500':
          $ref: '#/components/responses/InternalServer'
  /signup/conirm:
    post:
      tags:
        - Auth
      summary: 会員登録確認
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/Email'
                confirmationCode:
                  type: string
      responses:
        '204':
          description: '会員登録確認完了'
        '400':
          $ref: '#/components/responses/BadRequest'
        '410':
          description: 確認コード期限切れ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 'EXPIRED_CODE'
        '500':
          $ref: '#/components/responses/InternalServer'
  /personal/items:
    get:
      tags:
        - PersonalShopping
      summary: 個人買い物メモ取得API
      description: |
        ステータスを指定しない場合、全件取得。<br/>
        メモが存在しない場合は、空の配列を返す。
      parameters:
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/Status'
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonalItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServer'
    post:
      tags:
        - PersonalShopping
      summary: 個人買い物メモ作成API
      description: |
        個人用買い物メモを作成する。<br/>
        ステータスを渡さない場合、「UnPurchased」として登録する。
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalItem'
      responses:
        '204':
          description: '買い物メモ作成成功'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServer'
  /personal/items/{id}:
    put:
      tags:
        - PersonalShopping
      summary: '個人買い物メモ更新API'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalItem'
      responses:
        '204':
          description: '買い物メモ更新成功'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServer'
    delete:
      tags:
        - PersonalShopping
      summary: '個人買い物メモ削除'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: '買い物メモ削除成功'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServer'

components:
  responses:
    BadRequest:
      description: 'BadRequest'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'BAD_REQUEST'
            detail: 'invalid input'
    InternalServer:
      description: 'InternalServer'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'INTERNAL_SERVER_ERROR'
    Unauthorized:
      description: 'Unauthorized'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'UNAUTHORIZED'
            detail: 'failed to login process'
    Forbidden:
      description: 'Forbidden'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'FORBIDDEN'
            detail: 'permission denied'

  schemas:
    Status:
      type: string
      enum: ['UnPurchased', 'InTheCart', 'Purchased']
    PersonalItem:
      type: object
      properties:
        id:
          type: number
          readOnly: true
        name:
          type: string
        category_id:
          type: number
        status:
          $ref: '#/components/schemas/Status'
      required:
        - name
        - category_id
    Email:
      type: string
      format: email
    Error:
      type: object
      properties:
        code:
          type: string
        detail:
          type: string
